#!/usr/bin/env bash
#
# Linux WAN failover script.
#
# Copyright 2010 Louwrentius
#
# Licence = GNU GPL
#

VERSION=2.05

CONFIG=/etc/wfs
CONFIG_FILE="$CONFIG/wfs.conf"

if [ -e "$CONFIG_FILE" ]
then
    . $CONFIG_FILE
else
    TARGETS_FILE="$CONFIG/targets.txt"
    PRIMARY_GW_IFACE=eth0
    SECONDARY_GW_IFACE=ppp0
    MAX_LATENCY=1
    INTERVAL=20
    TEST_COUNT=2
    THRESHOLD=3
    COOLDOWNDELAY=20
    TTL=""
    COOLDOWNDELAY01=3600
    COOLDOWNDELAY02=600
    MAIL_TARGET=""
    QUIET=0
    #
    # If some command must be run after a failover or restore, please specify
    # the commands within these variables.
    #
    PRIMARY_CMD=""
    SECONDARY_CMD=""
fi

TARGETS_FAILED=0
ACTIVE_CONNECTION=""
TEST_INTERVAL="$INTERVAL"
NO_OF_TARGETS=ERROR

PRIMARY_GW=""
SECONDARY_GW=""

# --- do not change anything below ---

#route -n | grep -w "$PRIMARY_GW" | grep -w "0.0.0.0" >> /dev/null 2>&1
#if [ "$?" = "0" ]
#then
    ACTIVE_CONNECTION=PRIMARY
#else
#    ACTIVE_CONNECTION=SECONDARY
#fi

log () {

    TYPE="$1"
    MSG="$2"
    DATE=`date +%b\ %d\ %H:%M:%S`
    case "$TYPE" in
        "ERROR" )
                    log2syslog "$TYPE" "$TYPE $MSG"
                    ;;
        "DEBUG" )
                    if [ "$DEBUG" = "1" ]
                    then
                        if [ "$QUIET" = "0" ]
                        then
                            echo "$DATE" "$MSG"
                        fi
                        log2syslog "$TYPE" "$TYPE $MSG"
                    fi

                    ;;
        "INFO" )
                    if [ "$QUIET" = "0" ] && [ "$DEBUG" = "1" ]
                    then
                        echo "$DATE $MSG"
                    fi
                    log2syslog "$TYPE" "$TYPE $MSG"
                    ;;
    esac
}

log2mail () {

    SUBJECT="$1"
    BODY="$2"
    DATE=`date +%b\ %d\ %H:%M:%S`
    if [ ! -z "$MAIL_TARGET" ]
    then
        echo "$DATE - $BODY" | mail -s "$SUBJECT" "$MAIL_TARGET" &
    fi
}

log2syslog () {

    TYPE=`echo "$1" | awk '{print tolower($0)}'`
    MSG="$2"

    echo "$MSG" | logger -t "WFS" -p daemon."$TYPE"
}

init_wfs () {

    if [ ! -e "$TARGETS_FILE" ]
    then
        log ERROR "Targets file $TARGETS_FILE does not exist."
        exit 1
    else
        TARGETS=`cat "$TARGETS_FILE"`
        TMPVAR=( $TARGETS )
        NO_OF_TARGETS=${#TMPVAR[@]}
    fi
}

route_del () {

    route del default gw "$1"
}

display_header () {

    log INFO "------------------------------"
    log INFO " WAN Failover Script $VERSION"
    log INFO "------------------------------"
    log INFO " Max latency in seconds : $MAX_LATENCY"
    log INFO " Threshold before failover: $THRESHOLD"
    log INFO " Number of target hosts: $NO_OF_TARGETS"
    log INFO " Tests per host: $TEST_COUNT"
    log INFO "------------------------------"
}


#
# This route allows testing if the failed primary link
# Is available again, when in failover mode.
#


test_single_target () {

    TARGET="$1"
    log DEBUG "Test interval between hosts is $TEST_INTERVAL"

    ping -W "$MAX_LATENCY" -c "$TEST_COUNT" "$TARGET" >> /dev/null 2>&1
    if [ ! "$?" = "0" ]
    then
        log DEBUG "Host $TARGET UNREACHABLE"

        if [ "$TARGETS_FAILED" -lt "$THRESHOLD" ]
        then
            ((TARGETS_FAILED++))
        fi
        TEST_INTERVAL=1
    else
        if [ "$TARGETS_FAILED" -gt "0" ]
        then
            ((TARGETS_FAILED--))
        fi

        log DEBUG "Host $TARGET OK"
        if [ "$ACTIVE_CONNECTION" = "PRIMARY" ]
        then
            TEST_INTERVAL="$INTERVAL"
        fi
    fi
}


test_wan_status () {

    for x in $TARGETS
    do
        test_single_target $x
        if [ "$TARGETS_FAILED" -gt "0" ]
        then
            log DEBUG "Failed targets is $TARGETS_FAILED, threshold is $THRESHOLD."
        fi
        check_wan_status
        sleep "$TEST_INTERVAL"
    done
}

route_add () {
    if [ "$#" -lt "2" ]
    then
        route add default gw "$1"
    else
        route add default gw "$1" metric "$2"
    fi
}

switch_to_primary () {

    route_del "$SECONDARY_GW"
    route_add "$PRIMARY_GW" 0
    ACTIVE_CONNECTION="PRIMARY"
}

switch_to_secondary () {

    route_del "$PRIMARY_GW"
    route_add "$SECONDARY_GW" 20
    ACTIVE_CONNECTION="SECONDARY"
}

check_wan_status () {

    if [ "$TARGETS_FAILED" -ge "$THRESHOLD" ] && [ "$ACTIVE_CONNECTION" = "PRIMARY" ]
    then
        switch
    elif [ "$ACTIVE_CONNECTION" = "SECONDARY" ]
    then
        if [ "$TARGETS_FAILED" = "0" ]
        then
            switch
        fi
    else
        log DEBUG "WAN Link: $ACTIVE_CONNECTION"
    fi
}

switch () {

    if [ "$ACTIVE_CONNECTION" = "PRIMARY" ]
    then
        switch_to_secondary
        if [ ! -z "$SECONDARY_CMD" ]
        then
            eval "$SECONDARY_CMD"
        fi
        sleep "5"
        MSG="Primary WAN link failed. Switched to secondary link."
        #BODY=`route -n`
        #log2mail "$MSG" "$BODY"
        log INFO "$MSG"
        log DEBUG "Failover Cooldown started, sleeping for $COOLDOWNDELAY01 seconds."
        sleep "$COOLDOWNDELAY01"
    elif [ "$ACTIVE_CONNECTION" = "SECONDARY" ]
    then
        switch_to_primary
        if [ ! -z "$PRIMARY_CMD" ]
        then
            eval "$PRIMARY_CMD"
        fi
        sleep "10"
        MSG="Primary WAN link OK. Switched back to primary link."
        #BODY=`route -n`
        #log2mail "$MSG" "$BODY"
        log INFO "$MSG"
        log DEBUG "Failback Cooldown started, sleeping for $COOLDOWNDELAY02 seconds."
        sleep "$COOLDOWNDELAY02"
    fi
}

start_wfs () {

    init_wfs
    display_header

    log INFO "Starting monitoring of WAN link."

    RESTART_SERVICE="FALSE"
    while true
    do
        if [ -z "$PRIMARY_GW" ]
        then
            PRIMARY_GW=`ip route show 0.0.0.0/0 dev $PRIMARY_GW_IFACE 2>&1`
            FOUND_PRIMARY_GW=FALSE
            if [ "$?" = "0" ]
            then
                PRIMARY_GW=`echo "$PRIMARY_GW" | cut -d\  -f3`
                if [ -n "$PRIMARY_GW" ] && [[ "$PRIMARY_GW" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
                then
                    log INFO "Primary interface gateway is : $PRIMARY_GW"
                    if [ -z "$TARGETS" ]
                    then
                        log ERROR "No targets to test availability, targets file $TARGETS_FILE empty?."
                        exit 1
                    else
                        for x in $TARGETS
                        do
                            log INFO "Adding static route for host $x"
                            route add -host "$x" gw "$PRIMARY_GW" >> /dev/null 2>&1
                        done

                        # So the checking of static routes won't fail (I hope 1 sec is sufficient)
                        sleep 1
                    fi
                    FOUND_PRIMARY_GW=TRUE
                fi
            fi

            if [ "$FOUND_PRIMARY_GW" = "FALSE"  ]
            then
                PRIMARY_GW=""
                sleep 10
                continue
            fi
        else
            # check that static routes are still there, otherwise, restart the service
            # no need to check that primary gateway address has changed
            # (but don't use ppp0 as a primary interface !)
            if [ -n "$SECONDARY_GW" ]
            then
                CURRENT_ROUTES=`ip r`
                for x in $TARGETS
                do
                    TEST_ROUTE=`echo "$CURRENT_ROUTES" | grep "$x"`
                    if [ -z "$TEST_ROUTE" ]
                    then
                        log ERROR "Static route for '$x' disappeared (latency problem ?). Deleting it anyway."
                        route del -host "$x" gw "$PRIMARY_GW" >> /dev/null 2>&1
                        RESTART_SERVICE="TRUE"
                    fi
                    # test only one route
                    #break
                done

                # Restore secondary gateway
                if [ "$ACTIVE_CONNECTION" = "PRIMARY" ]
                then
                    log INFO "Restoring secondary gateway '$SECONDARY_GW' with a metric of 20 !"
                    ip route add default via "$SECONDARY_GW" metric 20
                fi
            fi
        fi

        if [ -z "$SECONDARY_GW" ]
        then
            SECONDARY_GW=`ip route show 0.0.0.0/0 dev $SECONDARY_GW_IFACE 2>&1`
            FOUND_SECONDARY_GW=FALSE
            if [ "$?" = "0" ]
            then
                SECONDARY_GW=`echo "$SECONDARY_GW" | cut -d\  -f3`
                if [ -n "$SECONDARY_GW" ] && [[ "$SECONDARY_GW" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
                then
                    log INFO "Secondary interface gateway is : $SECONDARY_GW"
                    # remove it !
                    #ip route del default via "$SECONDARY_GW"
                    route_del "$SECONDARY_GW"
                    FOUND_SECONDARY_GW=TRUE
                fi
            fi

            if [ "$FOUND_SECONDARY_GW" = "FALSE"  ]
            then
                SECONDARY_GW=""
                sleep 10
                continue
            fi
        elif [ "$RESTART_SERVICE" = "FALSE" ]
            # TODO : check that there isn't a new default gateway for the secondary interface (3G)
            # here, otherwise, restart the service
            SEC_IF=`ip r | grep "$SECONDARY_GW_IFACE"`
            SEC_IF_COUNT=`echo "$SEC_IF" | wc -l`
            if [ -z "$SEC_IF" ]
            then
                if [ "$ACTIVE_CONNECTION" = "SECONDARY" ]
                then
                    log ERROR "Secondary interface disappeared !"
                    log INFO "Restoring primary gateway '$PRIMARY_GW' with a metric of 0 !"
                    route_add "$PRIMARY_GW" 0
                    RESTART_SERVICE="TRUE"
                fi
            elif [ "$SEC_IF_COUNT" -eq "1" ]
            then
                CURRENT_SECONDARY_GW=`ip route show 0.0.0.0/0 dev "$SECONDARY_GW_IFACE" 2>&1`
                if [ "$?" = "0" ]
                then
                    CURRENT_SECONDARY_GW=`echo "$CURRENT_SECONDARY_GW" | cut -d\  -f3`
                    if [ -n "$CURRENT_SECONDARY_GW" ] && \
                       [[ "$CURRENT_SECONDARY_GW" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && \
                       [ "$CURRENT_SECONDARY_GW" != "$SECONDARY_GW" ]
                    then
                        log ERROR "Secondary interface gateway changed from '$SECONDARY_GW' to '$CURRENT_SECONDARY_GW'."
                        RESTART_SERVICE="TRUE"
                    fi
                #else
                #    log ERROR "Unable to determine current secondary interface gateway."
                #    RESTART_SERVICE="TRUE"
                fi
            elif [ "$SEC_IF_COUNT" -gt "1" ]
            then
                log ERROR "Multiple routes detected for secondary interface."
                
                if [ "$ACTIVE_CONNECTION" = "SECONDARY" ]
                then
                    log INFO "Deleting secondary interface gateway '$SECONDARY_GW'."
                    route_del "$SECONDARY_GW"
                    log INFO "Restoring primary gateway '$PRIMARY_GW' with a metric of 0 !"
                    route_add "$PRIMARY_GW" 0
                    RESTART_SERVICE="TRUE"
                fi
                RESTART_SERVICE="TRUE"
            fi
        fi

        # We restart the script here to handle the case where static routes are deleted externally
        # and secondary gateway has changed
        if [ "$RESTART_SERVICE" = "TRUE" ]
        then
            log INFO "Changes on routes detected. Shutting down WFS. It will be restarted via systemd."
            exit 1
        fi

        if [ -n "$PRIMARY_GW" ] && [ -n "$SECONDARY_GW" ]
        then
            test_wan_status
        fi
    done
}

stop_wfs () {
    log INFO "Got SIGTERM, cleaning and exiting."
    TARGETS=`cat "$TARGETS_FILE"`

    if [ ! -z "$TARGETS" ]
    then
        for x in $TARGETS
        do
            log INFO "Removing static route for host $x"
            route del -host "$x" gw "$PRIMARY_GW" >> /dev/null 2>&1
        done
    fi

    if [ -n "$PRIMARY_GW" ] && [ -n "$SECONDARY_GW" ]
    then
        if [ "$ACTIVE_CONNECTION" = "PRIMARY" ]
        then
            log INFO "Restoring secondary gateway '$SECONDARY_GW' with a metric of 20 !"
            ip route add default via "$SECONDARY_GW" metric 20
        else
            log INFO "Restoring primary gateway '$PRIMARY_GW' with a metric of 0 !"
            ip route add default via "$PRIMARY_GW" metric 0
        fi
    fi

    exit 0
}

trap stop_wfs SIGINT SIGTERM

start_wfs
